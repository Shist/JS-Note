{"mappings":"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","sources":["assets/scripts/script.js"],"sourcesContent":["\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  /// Store\r\n  let notesArr = [];\r\n  let notesUniqueIds = new Set();\r\n  let currUniqueId = 0;\r\n\r\n  // Controller\r\n  // Container with notes\r\n  const notesContainer = document.querySelector(\".notes-container\");\r\n  // Element for showing errors\r\n  const errorMessage = document.querySelector(\".global-container__error-msg\");\r\n  errorMessage.setAttribute(\"style\", \"white-space: pre-wrap;\");\r\n  // Elements for creating\r\n  const createInputTitle = document.querySelector(\"#create-title\");\r\n  const createInputDescription = document.querySelector(\"#create-description\");\r\n  const createSelectNoteState = document.querySelector(\"#create-state\");\r\n  const createInputDeadline = document.querySelector(\"#create-deadline\");\r\n  createInputDeadline.value = new Date().toISOString().split(\"T\")[0];\r\n  const createBtn = document.querySelector(\".global-container__create-btn\");\r\n  // Elements for searching\r\n  const searchInputTitle = document.querySelector(\"#search-title\");\r\n  const searchInputDescription = document.querySelector(\"#search-description\");\r\n  const searchSelectNoteState = document.querySelector(\"#search-state\");\r\n  const searchBtn = document.querySelector(\".global-container__refresh-btn\");\r\n  // Elements for sorting\r\n  const selectSortOption = document.querySelector(\"#select-sort-option\");\r\n  // Elements for editing\r\n  const formContainer = document.querySelector(\".edit-form-wrapper\");\r\n  const closeBtn = document.querySelector(\".edit-form__close-btn\");\r\n  const editErrorMessage = document.querySelector(\".edit-form__error-msg\");\r\n  const editInputTitle = document.querySelector(\"#edit-title\");\r\n  const editInputDescription = document.querySelector(\"#edit-description\");\r\n  const editSelectNoteState = document.querySelector(\"#edit-state\");\r\n  const editInputDeadline = document.querySelector(\"#edit-deadline\");\r\n  const confirmBtn = document.querySelector(\".edit-form__confirm-btn\");\r\n  // Event while clicling on create button\r\n  createBtn.addEventListener(\"click\", () => {\r\n    const isTitleWrong = isTitleDataWrong(createInputTitle.value);\r\n    const isDescriptionWrong = isDescriptionDataWrong(\r\n      createInputDescription.value\r\n    );\r\n    if (isTitleWrong) {\r\n      errorMessage.textContent = `Error while creating Title:\\n${isTitleWrong}`;\r\n      showErrorMessage();\r\n      return;\r\n    }\r\n    if (isDescriptionWrong) {\r\n      errorMessage.textContent = `Error while creating Description:\\n${isDescriptionWrong}`;\r\n      showErrorMessage();\r\n      return;\r\n    }\r\n    hideErrorMessage();\r\n    addNote();\r\n    updateNotesList(notesArr);\r\n  });\r\n  // Event while clicling on search button\r\n  searchBtn.addEventListener(\"click\", () => {\r\n    updateNotesList(notesArr);\r\n  });\r\n  // Event while clicking on something inside notes container\r\n  notesContainer.addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"note-card__delete-btn\")) {\r\n      deleteNoteByUniqueId(event.target.id);\r\n      updateNotesList(notesArr);\r\n    }\r\n    if (event.target.classList.contains(\"note-card__edit-btn\")) {\r\n      prepareEditingModalWindow(event.target.id);\r\n    }\r\n  });\r\n  // Event while clicking on button with cross at the top-right corner of editing form\r\n  closeBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault();\r\n    hideEditingModalWindow();\r\n  });\r\n  // Event while clicking on confirm button in order to sumbit changes in editing form\r\n  confirmBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault();\r\n    const isTitleWrong = isTitleDataWrong(editInputTitle.value);\r\n    const isDescriptionWrong = isDescriptionDataWrong(\r\n      editInputDescription.value\r\n    );\r\n    if (isTitleWrong) {\r\n      editErrorMessage.textContent = `Error while editing Title:\\n${isTitleWrong}`;\r\n      showEditErrorMessage();\r\n      return;\r\n    }\r\n    if (isDescriptionWrong) {\r\n      editErrorMessage.textContent = `Error while editing Description:\\n${isDescriptionWrong}`;\r\n      showEditErrorMessage();\r\n      return;\r\n    }\r\n    editNoteByUniqueId(event.target.id);\r\n    updateNotesList(notesArr);\r\n    hideEditingModalWindow();\r\n  });\r\n  // Event while clicking on dark space around edit form\r\n  formContainer.addEventListener(\"click\", (event) => {\r\n    if (event.target === formContainer) {\r\n      hideEditingModalWindow();\r\n    }\r\n  });\r\n  document.addEventListener(\"keydown\", (event) => {\r\n    if (\r\n      event.code === \"Escape\" &&\r\n      formContainer.classList.contains(\"appeared-flex\")\r\n    ) {\r\n      hideEditingModalWindow();\r\n    }\r\n  });\r\n\r\n  // Model\r\n  // addNote() => {...} - Adds data to array\r\n  function addNote() {\r\n    const newNote = {\r\n      uniqueId: generateUniqueId(notesUniqueIds),\r\n      title: createInputTitle.value,\r\n      description: createInputDescription.value,\r\n      state: createSelectNoteState.value,\r\n      deadline: createInputDeadline.value,\r\n    };\r\n    notesArr.push(newNote);\r\n    localStorage.setItem(newNote.uniqueId.toString(), JSON.stringify(newNote));\r\n    localStorage.setItem(\"currUniqueId\", newNote.uniqueId.toString());\r\n    localStorage.setItem(\"uniqueIdsArray\", JSON.stringify([...notesUniqueIds]));\r\n    cleanCreateInputs();\r\n  }\r\n  // cleanCreateInputs() => {...} - Cleans input values of create-inputs\r\n  function cleanCreateInputs() {\r\n    createInputTitle.value = \"\";\r\n    createInputDescription.value = \"\";\r\n    createSelectNoteState.value = \"In progress\";\r\n    createInputDeadline.value = new Date().toISOString().split(\"T\")[0];\r\n  }\r\n  // updateNotesList(arr) => {...} - loops through the array \"arr\" and renders the elements on the page\r\n  function updateNotesList(arr) {\r\n    const filteredArr = arr.filter((note) => {\r\n      if (\r\n        searchSelectNoteState.value === \"All\" ||\r\n        note.state === searchSelectNoteState.value\r\n      ) {\r\n        return (\r\n          note.title.includes(searchInputTitle.value) &&\r\n          note.description.includes(searchInputDescription.value)\r\n        );\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    notesContainer.innerHTML = \"\";\r\n    sortNotesArr(filteredArr, selectSortOption.value);\r\n    if (filteredArr.length > 0) {\r\n      filteredArr.forEach((note) => {\r\n        renderNoteCard(note);\r\n      });\r\n    } else {\r\n      notesContainer.innerHTML = `<h3 class=\"notes-container__no-notes-text\">No notes were found matching the given parameters...</h3>`;\r\n    }\r\n  }\r\n  // deleteNoteByUniqueId(uniqueId) => {...} - Deletes note with specific id \"uniqueId\" from the array and from the set\r\n  function deleteNoteByUniqueId(uniqueId) {\r\n    const noteIndexInArray = getNoteIndexByUniqueId(notesArr, uniqueId);\r\n    notesArr.splice(noteIndexInArray, 1);\r\n    notesUniqueIds.delete(+uniqueId);\r\n    localStorage.removeItem(uniqueId.toString());\r\n    localStorage.setItem(\"uniqueIdsArray\", JSON.stringify([...notesUniqueIds]));\r\n  }\r\n  // deleteNoteByUniqueId(uniqueId) => {...} - Edits note with specific id \"uniqueId\" in the array\r\n  function editNoteByUniqueId(uniqueId) {\r\n    const noteIndexInArray = getNoteIndexByUniqueId(notesArr, uniqueId);\r\n    const targetNote = notesArr[noteIndexInArray];\r\n    targetNote.title = editInputTitle.value;\r\n    targetNote.description = editInputDescription.value;\r\n    targetNote.state = editSelectNoteState.value;\r\n    targetNote.deadline = editInputDeadline.value;\r\n    localStorage.setItem(uniqueId.toString(), JSON.stringify(targetNote));\r\n  }\r\n  // generateUniqueId(set) => {...} - Generates unique identifier that is not yet in the set \"set\"\r\n  function generateUniqueId(set) {\r\n    if (++currUniqueId < Number.MAX_SAFE_INTEGER) {\r\n      set.add(currUniqueId);\r\n      return currUniqueId;\r\n    }\r\n    return \"Critical error! There are no any unique identifiers left!\";\r\n  }\r\n  // getNoteIndexByUniqueId(arr, neededId) => {...} - Finds and returns index in the array \"arr\" of the object with specific uniqie id \"neededId\"\r\n  function getNoteIndexByUniqueId(arr, neededId) {\r\n    for (let indexInArray in arr) {\r\n      if (arr[indexInArray].uniqueId == neededId) return indexInArray;\r\n    }\r\n    return \"Critical error! There are no elements with given specific unique identifier\";\r\n  }\r\n  // hideEditErrorMessage() => {...} - Hides error message on edit modal window\r\n  function hideEditErrorMessage() {\r\n    editErrorMessage.classList.remove(\"appeared-block\");\r\n    editErrorMessage.classList.add(\"hidden-element\");\r\n  }\r\n  // hideEditingModalWindow() => {...} - Hides modal window for editing notes data\r\n  function hideEditingModalWindow() {\r\n    hideEditErrorMessage();\r\n    formContainer.classList.remove(\"appeared-flex\");\r\n    formContainer.classList.add(\"hidden-element\");\r\n  }\r\n  // hideErrorMessage() => {...} - Hides error message on main page\r\n  function hideErrorMessage() {\r\n    errorMessage.classList.remove(\"appeared-block\");\r\n    errorMessage.classList.add(\"hidden-element\");\r\n  }\r\n  // isDescriptionDataWrong(str) => {...} - Checks if user's description invalid. If yes, returns error message. If no, returns false.\r\n  function isDescriptionDataWrong(str) {\r\n    if (str.length > 128)\r\n      return \"You can not enter the description with more than 128 symbols\";\r\n    if (str.split(/\\r\\n|\\r|\\n/).length > 7)\r\n      return \"You can not enter the description with more than 7 lines\";\r\n    return false;\r\n  }\r\n  // isTitleDataWrong(str) => {...} - Checks if user's title invalid. If yes, returns error message. If no, returns false.\r\n  function isTitleDataWrong(str) {\r\n    if (!str.trim()) return \"You can not enter an empty title!\";\r\n    if (str.length > 32)\r\n      return \"You can not enter the title with length more than 32 symbols\";\r\n    return false;\r\n  }\r\n  // loadLocalData() => {...} - Load local data from browser memory and refresh notes list after that\r\n  function loadLocalData() {\r\n    const currUniqueIdFromLocal = localStorage.getItem(\"currUniqueId\");\r\n    if (currUniqueIdFromLocal) {\r\n      currUniqueId = +currUniqueIdFromLocal;\r\n    }\r\n    const notesUniqueIdsArrayFromLocal = JSON.parse(\r\n      localStorage.getItem(\"uniqueIdsArray\")\r\n    );\r\n    if (notesUniqueIdsArrayFromLocal && notesUniqueIdsArrayFromLocal.length) {\r\n      notesUniqueIds = new Set(notesUniqueIdsArrayFromLocal);\r\n      notesUniqueIds.forEach((uniqueId) => {\r\n        const noteDataFromLocal = JSON.parse(\r\n          localStorage.getItem(uniqueId.toString())\r\n        );\r\n        if (noteDataFromLocal) {\r\n          notesArr.push(noteDataFromLocal);\r\n        }\r\n      });\r\n    }\r\n    updateNotesList(notesArr);\r\n  }\r\n  // prepareEditingModalWindow(uniqueId) => {...} - prepares modal window for editing data of note with specific id \"uniqueId\"\r\n  function prepareEditingModalWindow(uniqueId) {\r\n    const noteIndexInArray = getNoteIndexByUniqueId(notesArr, uniqueId);\r\n    editInputTitle.value = notesArr[noteIndexInArray].title;\r\n    editInputDescription.value = notesArr[noteIndexInArray].description;\r\n    editSelectNoteState.value = notesArr[noteIndexInArray].state;\r\n    editInputDeadline.value = notesArr[noteIndexInArray].deadline;\r\n    confirmBtn.id = uniqueId;\r\n    showEditingModalWindow();\r\n  }\r\n  // reformatDate(date => {...} - Reformates date from YYYY-MM-DD to DD.MM.YYYY\r\n  function reformatDate(date) {\r\n    return date.split(\"-\").reverse().join(\".\");\r\n  }\r\n  // renderNoteCard(note) => {...} - Adds to the page given information about note \"note\"\r\n  function renderNoteCard(note) {\r\n    notesContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `<div class=\"note-card\">\r\n        <h3 class=\"note-card__title\">${note.title}</h3>\r\n        <h4 class=\"note-card__description-headline\">Description:</h4>\r\n        <p class=\"note-card__description_last note-card__description\">${\r\n          note.description ? note.description : \"Description is empty...\"\r\n        }</p>\r\n        <h4 class=\"note-card__state_last note-card__state\">State: ${\r\n          note.state\r\n        }</h4>\r\n        <h4 class=\"note-card__deadline_last note-card__deadline\">Deadline: ${reformatDate(\r\n          note.deadline\r\n        )}</h4>\r\n        <div class=\"note-card__buttons-wrapper\">\r\n          <button class=\"note-card__edit-btn\" id=\"${\r\n            note.uniqueId\r\n          }\">Edit note</button>\r\n          <button class=\"note-card__delete-btn\" id=\"${\r\n            note.uniqueId\r\n          }\">Delete note</button>\r\n        </div>\r\n      </div>`\r\n    );\r\n  }\r\n  // showEditErrorMessage() => {...} - Shows error message on edit modal window\r\n  function showEditErrorMessage() {\r\n    editErrorMessage.classList.remove(\"hidden-element\");\r\n    editErrorMessage.classList.add(\"appeared-block\");\r\n  }\r\n  // showEditingModalWindow() => {...} - Shows modal window for editing notes data\r\n  function showEditingModalWindow() {\r\n    formContainer.classList.remove(\"hidden-element\");\r\n    formContainer.classList.add(\"appeared-flex\");\r\n  }\r\n  // showErrorMessage() => {...} - Shows error message on main page\r\n  function showErrorMessage() {\r\n    errorMessage.classList.remove(\"hidden-element\");\r\n    errorMessage.classList.add(\"appeared-block\");\r\n  }\r\n  // sortNotesArr(notesArr, sortOption) => {...} - Sorts array \"notesArr\" by option \"sortOption\"\r\n  function sortNotesArr(notesArr, sortOption) {\r\n    switch (sortOption) {\r\n      case \"Deadline\":\r\n        notesArr.sort((first, second) => {\r\n          return new Date(first.deadline) - new Date(second.deadline);\r\n        });\r\n        return notesArr;\r\n      case \"State\":\r\n        notesArr.sort((first, second) => {\r\n          return first.state > second.state\r\n            ? 1\r\n            : second.state > first.state\r\n            ? -1\r\n            : 0;\r\n        });\r\n        return notesArr;\r\n      case \"Title\":\r\n        notesArr.sort((first, second) => {\r\n          return first.title > second.title\r\n            ? 1\r\n            : second.title > first.title\r\n            ? -1\r\n            : 0;\r\n        });\r\n        return notesArr;\r\n      case \"Description\":\r\n        notesArr.sort((first, second) => {\r\n          return first.description > second.description\r\n            ? 1\r\n            : second.description > first.description\r\n            ? -1\r\n            : 0;\r\n        });\r\n        return notesArr;\r\n    }\r\n  }\r\n\r\n  // Loading local data (if exsist) from the start\r\n  loadLocalData();\r\n});\r\n"],"names":[],"version":3,"file":"index.61941409.js.map","sourceRoot":"/__parcel_source_root/"}